#! /usr/bin/python

#    Copyright (c) 2011 David Calle <davidc@framli.eu>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import glob
from gi.repository import GLib, GObject, Gio
from gi.repository import Dee
from gi.repository import Unity
import urllib2
import simplejson
import locale
import datetime

BUS_NAME = "net.launchpad.lens.nx"

class Daemon:

    def __init__ (self):
        self.error_connect = False
        # The path for the Lens *must* also match the one in our .lens file
        self._lens = Unity.Lens.new ("/net/launchpad/lens/nx", "nx")
        self._scope = Unity.Scope.new ("/net/launchpad/lens/nx/main")
        self._scope.search_in_global = True

        self._lens.props.search_hint = "Search Nx"
        self._lens.props.visible = True;
        self._lens.props.search_in_global = True;
        self._lens.props.sources_display_name = ("NX Configs")


        self._lens.add_local_scope (self._scope);
        self._scope.connect("search-changed", self.on_search_changed)
        svg_dir = "/usr/share/icons/unity-icon-theme/places/svg/"

        # Populate categories
        cats = []
        cats.append (Unity.Category.new ("NX Sessions",
                                         Gio.ThemedIcon.new(svg_dir+"group-installed.svg"),
                                         Unity.CategoryRenderer.VERTICAL_TILE))
        self._lens.props.categories = cats

        locale.setlocale(locale.LC_MESSAGES, '')
        loc = locale.getlocale(locale.LC_MESSAGES)[0].split("_")[0]

        self._lens.export ();
        self._scope.export ();


    def on_search_changed (self, scope, search, search_type, *_):
        #        if search_type is Unity.SearchType.DEFAULT:
        search_string = search.props.search_string.strip()
        print "Search changed to \"%s\"" % search_string
        model = search.props.results_model
        model.clear()
        self.update_results_model(model, search_string)
        search.set_reply_hint ("no-results-hint", GLib.Variant.new_string("Sorry, there are no articles that match your search."))
        search.finished()

    def update_results_model (self, model, search):
        if search == '':
            return

        files = glob.glob("%s/.nx/config/*%s*.nxs" % (os.environ["HOME"], search))

        for config in files:
            model.append("file://%s" % config,
                         "file:///usr/NX/share/icons/48x48/nxclient-icon.png",
                         0,
                         "text/html",
                         os.path.splitext(os.path.basename(config))[0],
                         "NX Config",
                         "file://%s" % config,
                         )

if __name__ == "__main__":
    session_bus_connection = Gio.bus_get_sync (Gio.BusType.SESSION, None)
    session_bus = Gio.DBusProxy.new_sync (session_bus_connection, 0, None,
                                          'org.freedesktop.DBus',
                                          '/org/freedesktop/DBus',
                                          'org.freedesktop.DBus', None)
    result = session_bus.call_sync('RequestName',
                                   GLib.Variant ("(su)", (BUS_NAME, 0x4)),
                                   0, -1, None)

    # Unpack variant response with signature "(u)". 1 means we got it.
    result = result.unpack()[0]

    if result != 1 :
        print >> sys.stderr, "Failed to own name %s. Bailing out." % BUS_NAME
        raise SystemExit (1)

    daemon = Daemon()
    GObject.MainLoop().run()
